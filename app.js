// maru-text-to-speech „É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥
class TextToSpeechApp {
  constructor() {
    this.synth = window.speechSynthesis;
    this.utterance = null;
    this.voices = [];
    this.currentLanguage = 'auto';
    this.isPlaying = false;
    this.isPaused = false;
    this.visualizer = null;
    this.animationId = null;

    this.initializeElements();
    this.initializeEventListeners();
    // „ÉÜ„Éº„ÉûÊ©üËÉΩÂâäÈô§
    this.initializeVoices();
    this.initializeVisualizer();
    this.initializePWA();
  }

  initializeElements() {
    // „ÉÜ„Ç≠„Çπ„ÉàÈñ¢ÈÄ£
    this.textInput = document.getElementById('textInput');
    this.charCount = document.getElementById('charCount');

    // Ë®ÄË™ûÈñ¢ÈÄ£
    this.languageSelect = document.getElementById('languageSelect');
    this.detectedLanguage = document.getElementById('detectedLanguage');

    // Èü≥Â£∞Âà∂Âæ°Èñ¢ÈÄ£
    this.voiceSelect = document.getElementById('voiceSelect');
    this.genderSelect = document.getElementById('genderSelect');
    this.rateSlider = document.getElementById('rateSlider');
    this.rateValue = document.getElementById('rateValue');
    this.pitchSlider = document.getElementById('pitchSlider');
    this.pitchValue = document.getElementById('pitchValue');
    this.volumeSlider = document.getElementById('volumeSlider');
    this.volumeValue = document.getElementById('volumeValue');

    // ÂÜçÁîüÂà∂Âæ°Èñ¢ÈÄ£
    this.playBtn = document.getElementById('playBtn');
    this.pauseBtn = document.getElementById('pauseBtn');
    this.stopBtn = document.getElementById('stopBtn');

    // UIÈñ¢ÈÄ£
    this.statusDisplay = document.getElementById('statusDisplay');
    this.visualizerCanvas = document.getElementById('visualizer');
    this.visualizerCtx = this.visualizerCanvas.getContext('2d');
  }

  initializeEventListeners() {
    // „ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ
    this.textInput.addEventListener('input', () => this.handleTextInput());
    this.textInput.addEventListener('paste', () => {
      setTimeout(() => this.handleTextInput(), 10);
    });

    // Ë®ÄË™ûÈÅ∏Êäû
    this.languageSelect.addEventListener('change', () => this.handleLanguageChange());

    // Èü≥Â£∞Âà∂Âæ°
    this.voiceSelect.addEventListener('change', () => this.handleVoiceChange());
    this.genderSelect.addEventListener('change', () => this.filterVoicesByGender());

    // „Çπ„É©„Ç§„ÉÄ„Éº
    this.rateSlider.addEventListener('input', () => this.updateSliderValue('rate'));
    this.pitchSlider.addEventListener('input', () => this.updateSliderValue('pitch'));
    this.volumeSlider.addEventListener('input', () => this.updateSliderValue('volume'));

    // ÂÜçÁîüÂà∂Âæ°„Éú„Çø„É≥
    this.playBtn.addEventListener('click', () => this.handlePlay());
    this.pauseBtn.addEventListener('click', () => this.handlePause());
    this.stopBtn.addEventListener('click', () => this.handleStop());

    // „ÉÜ„Éº„ÉûÂàá„ÇäÊõø„ÅàÊ©üËÉΩ„ÇíÂâäÈô§Ôºà„ÉÄ„Éº„ÇØ„É¢„Éº„ÉâÂªÉÊ≠¢Ôºâ

    // „Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà
    document.addEventListener('keydown', (e) => this.handleKeyboardShortcuts(e));

    // Èü≥Â£∞ÂêàÊàê„Ç§„Éô„É≥„Éà
    this.synth.addEventListener('voiceschanged', () => this.initializeVoices());

    // „Éö„Éº„Ç∏„ÅÆÂèØË¶ñÊÄßÂ§âÊõ¥
    document.addEventListener('visibilitychange', () => this.handleVisibilityChange());
  }

  handleTextInput() {
    const text = this.textInput.value;
    const length = text.length;

    // ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„ÇøÊõ¥Êñ∞
    this.charCount.textContent = `${length.toLocaleString()} / 10,000`;

    if (length > 9000) {
      this.charCount.style.color = 'var(--error-color)';
    } else if (length > 7000) {
      this.charCount.style.color = 'var(--warning-color)';
    } else {
      this.charCount.style.color = 'var(--text-muted)';
    }

    // Ëá™ÂãïË®ÄË™ûÂà§ÂÆö
    if (this.languageSelect.value === 'auto' && text.trim()) {
      this.detectLanguage(text);
    } else if (!text.trim()) {
      this.detectedLanguage.textContent = '';
    }
  }

  detectLanguage(text) {
    // Êó•Êú¨Ë™ûÊñáÂ≠ó„ÅÆÊ§úÂá∫Ôºà„Å≤„Çâ„Åå„Å™„ÄÅ„Ç´„Çø„Ç´„Éä„ÄÅÊº¢Â≠óÔºâ
    const japaneseRegex = /[\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/;
    const hasJapanese = japaneseRegex.test(text);

    // Ëã±Ë™û„Ç¢„É´„Éï„Ç°„Éô„ÉÉ„Éà„ÅÆÊ§úÂá∫
    const englishRegex = /[a-zA-Z]/;
    const hasEnglish = englishRegex.test(text);

    let detectedLang = 'ja-JP'; // „Éá„Éï„Ç©„É´„Éà„ÅØÊó•Êú¨Ë™û

    if (hasJapanese && hasEnglish) {
      // Ê∑∑Âú®„ÉÜ„Ç≠„Çπ„Éà„ÅÆÂ†¥Âêà„ÄÅÊó•Êú¨Ë™ûÊñáÂ≠ó„ÅÆÂâ≤Âêà„ÅßÂà§ÂÆö
      const japaneseChars = text.match(/[\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/g) || [];
      const totalChars = text.replace(/\s/g, '').length;
      const japaneseRatio = japaneseChars.length / totalChars;

      detectedLang = japaneseRatio > 0.3 ? 'ja-JP' : 'en-US';
    } else if (hasEnglish && !hasJapanese) {
      detectedLang = 'en-US';
    }

    this.currentLanguage = detectedLang;
    this.updateDetectedLanguageDisplay(detectedLang);
    this.filterVoicesByLanguage(detectedLang);
  }

  updateDetectedLanguageDisplay(lang) {
    const langNames = {
      'ja-JP': 'Êó•Êú¨Ë™û',
      'en-US': 'Ëã±Ë™û (Á±≥ÂõΩ)',
      'en-GB': 'Ëã±Ë™û (Ëã±ÂõΩ)'
    };

    this.detectedLanguage.textContent = `Ê§úÂá∫Ë®ÄË™û: ${langNames[lang] || lang}`;
  }

  handleLanguageChange() {
    const selectedLang = this.languageSelect.value;

    if (selectedLang === 'auto') {
      if (this.textInput.value.trim()) {
        this.detectLanguage(this.textInput.value);
      } else {
        this.detectedLanguage.textContent = '';
      }
    } else {
      this.currentLanguage = selectedLang;
      this.detectedLanguage.textContent = '';
      this.filterVoicesByLanguage(selectedLang);
    }
  }

  initializeVoices() {
    this.voices = this.synth.getVoices();

    if (this.voices.length === 0) {
      // Èü≥Â£∞„Åå„Åæ„Å†Ë™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÄÅÂ∞ë„ÅóÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å
      setTimeout(() => this.initializeVoices(), 100);
      return;
    }

    this.populateVoiceSelect();
    this.filterVoicesByGender();
  }

  populateVoiceSelect() {
    this.voiceSelect.innerHTML = '';

    // ÁèæÂú®„ÅÆË®ÄË™û„Å´ÈÅ©„Åó„ÅüÈü≥Â£∞„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    let filteredVoices = this.voices;

    if (this.currentLanguage && this.currentLanguage !== 'auto') {
      filteredVoices = this.voices.filter(voice =>
        voice.lang.startsWith(this.currentLanguage.split('-')[0])
      );
    }

    // ÊÄßÂà•„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    const genderFilter = this.genderSelect.value;
    if (genderFilter !== 'all') {
      filteredVoices = filteredVoices.filter(voice => {
        const gender = this.getVoiceGender(voice);
        return gender === genderFilter || (genderFilter === 'unknown' && gender === 'unknown');
      });
    }

    if (filteredVoices.length === 0) {
      filteredVoices = this.voices; // „Éï„Ç£„É´„ÇøÁµêÊûú„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØÂÖ®Èü≥Â£∞„ÇíË°®Á§∫
    }

    // È´òÂìÅË≥™Èü≥Â£∞„ÇíÂÑ™ÂÖà„Åó„Å¶„ÇΩ„Éº„Éà
    filteredVoices.sort((a, b) => {
      // ÂìÅË≥™„Å´„Çà„ÇãÂÑ™ÂÖàÈ†Ü‰Ωç
      const qualityOrder = { local: 0, default: 1, premium: 2, standard: 3 };

      // „É≠„Éº„Ç´„É´Èü≥Â£∞„ÇíÊúÄÂÑ™ÂÖà
      if (a.localService !== b.localService) {
        return a.localService ? -1 : 1;
      }

      // „Éá„Éï„Ç©„É´„ÉàÈü≥Â£∞„ÇíÊ¨°„Å´ÂÑ™ÂÖà
      if (a.default !== b.default) {
        return a.default ? -1 : 1;
      }

      // ÊÄßÂà•„ÅßÂàÜÈ°û
      const aGender = this.getVoiceGender(a);
      const bGender = this.getVoiceGender(b);
      if (aGender !== bGender) {
        // Â•≥ÊÄß„ÄÅÁî∑ÊÄß„ÄÅ‰∏çÊòé„ÅÆÈ†Ü
        const genderOrder = { female: 0, male: 1, unknown: 2 };
        return (genderOrder[aGender] || 2) - (genderOrder[bGender] || 2);
      }

      // ÂêçÂâç„Åß„ÇΩ„Éº„Éà
      return a.name.localeCompare(b.name);
    });

    // Èü≥Â£∞„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Éû„ÉÉ„Éî„É≥„Ç∞„Çí‰øùÂ≠ò
    this.currentFilteredVoices = filteredVoices;

    filteredVoices.forEach((voice, index) => {
      const option = document.createElement('option');
      option.value = index;

      // Èü≥Â£∞„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíË°®Á§∫
      const gender = this.getVoiceGender(voice);
      const genderIcon = gender === 'female' ? 'üë©' : gender === 'male' ? 'üë®' : 'üîä';
      const qualityIcon = voice.localService ? 'üèÜ' : voice.default ? '‚≠ê' : '';

      option.textContent = `${genderIcon} ${voice.name} (${voice.lang}) ${qualityIcon}`;
      this.voiceSelect.appendChild(option);
    });

    // ÊúÄÈÅ©„Å™Èü≥Â£∞„ÇíËá™ÂãïÈÅ∏Êäû
    let preferredIndex = 0;

    // 1. ÁèæÂú®„ÅÆË®ÄË™û„Å´ÂÆåÂÖ®‰∏ÄËá¥„Åô„Çã„É≠„Éº„Ç´„É´Èü≥Â£∞
    let bestMatch = filteredVoices.findIndex(voice =>
      voice.localService && voice.lang === this.currentLanguage
    );

    // 2. ÁèæÂú®„ÅÆË®ÄË™û„Å´ÈÉ®ÂàÜ‰∏ÄËá¥„Åô„Çã„É≠„Éº„Ç´„É´Èü≥Â£∞
    if (bestMatch === -1) {
      bestMatch = filteredVoices.findIndex(voice =>
        voice.localService && voice.lang.startsWith(this.currentLanguage.split('-')[0])
      );
    }

    // 3. ÁèæÂú®„ÅÆË®ÄË™û„ÅÆ„Éá„Éï„Ç©„É´„ÉàÈü≥Â£∞
    if (bestMatch === -1) {
      bestMatch = filteredVoices.findIndex(voice =>
        voice.default && voice.lang.startsWith(this.currentLanguage.split('-')[0])
      );
    }

    // 4. ÊúÄÂàù„ÅÆ„É≠„Éº„Ç´„É´Èü≥Â£∞
    if (bestMatch === -1) {
      bestMatch = filteredVoices.findIndex(voice => voice.localService);
    }

    if (bestMatch !== -1) {
      preferredIndex = bestMatch;
    }

    this.voiceSelect.selectedIndex = preferredIndex;
  }

  getVoiceGender(voice) {
    const name = voice.name.toLowerCase();

    // „Çà„ÇäË©≥Á¥∞„Å™Èü≥Â£∞Ë≠òÂà•„Ç≠„Éº„ÉØ„Éº„Éâ
    const femaleKeywords = [
      'female', 'woman', 'girl', 'lady', 'f',
      '„Åï„Åè„Çâ', '„ÅØ„Çã„Åã', 'kyoko', 'sara', 'voice1', 'voice3',
      'zira', 'hazel', 'susan', 'helen', 'karen', 'samantha',
      'microsoft haruka', 'microsoft sayaka', 'microsoft ayumi'
    ];

    const maleKeywords = [
      'male', 'man', 'boy', 'gentleman', 'm',
      '„Åü„Çç„ÅÜ', 'takeshi', 'ichiro', 'voice2', 'voice4',
      'david', 'mark', 'george', 'alex', 'daniel',
      'microsoft ichiro', 'microsoft haruto'
    ];

    // Êó•Êú¨Ë™ûÈü≥Â£∞„ÅÆÁâπÂà•Âà§ÂÆö
    if (voice.lang && voice.lang.startsWith('ja')) {
      // Microsoft Êó•Êú¨Ë™ûÈü≥Â£∞„ÅÆÂà§ÂÆö
      if (name.includes('haruka') || name.includes('sayaka') || name.includes('ayumi')) return 'female';
      if (name.includes('ichiro') || name.includes('haruto')) return 'male';

      // Google Êó•Êú¨Ë™ûÈü≥Â£∞„ÅÆÂà§ÂÆö
      if (name.includes('female') || name.includes('woman')) return 'female';
      if (name.includes('male') || name.includes('man')) return 'male';
    }

    // Ëã±Ë™ûÈü≥Â£∞„ÅÆÂà§ÂÆö
    if (voice.lang && voice.lang.startsWith('en')) {
      if (femaleKeywords.some(keyword => name.includes(keyword))) return 'female';
      if (maleKeywords.some(keyword => name.includes(keyword))) return 'male';
    }

    // ‰∏ÄËà¨ÁöÑ„Å™Âà§ÂÆö
    if (femaleKeywords.some(keyword => name.includes(keyword))) {
      return 'female';
    }
    if (maleKeywords.some(keyword => name.includes(keyword))) {
      return 'male';
    }

    // Êé®Ê∏¨‰∏çÂèØËÉΩ„Å™Â†¥Âêà„ÅØÈü≥Â£∞„ÅÆÁâπÊÄß„ÅßÂà§ÂÆöÔºàÁ∞°ÊòìÁâàÔºâ
    // Êó•Êú¨Ë™ûÈü≥Â£∞„ÅØ„Éá„Éï„Ç©„É´„Éà„ÅßÂ•≥ÊÄß„ÄÅËã±Ë™ûÈü≥Â£∞„ÅØ‰∏çÊòé„Å®„Åó„Å¶Êâ±„ÅÜ
    if (voice.lang && voice.lang.startsWith('ja')) {
      return 'female';
    }

    return 'unknown';
  }

  filterVoicesByLanguage(lang) {
    this.populateVoiceSelect();
  }

  filterVoicesByGender() {
    this.populateVoiceSelect();
  }

  handleVoiceChange() {
    // Èü≥Â£∞Â§âÊõ¥ÊôÇ„ÅÆÂá¶ÁêÜÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶ËøΩÂä†Ôºâ
  }

  updateSliderValue(type) {
    const slider = document.getElementById(`${type}Slider`);
    const valueDisplay = document.getElementById(`${type}Value`);
    const value = slider.value;

    if (type === 'volume') {
      valueDisplay.textContent = Math.round(value);
    } else {
      valueDisplay.textContent = parseFloat(value).toFixed(1);
    }
  }

  createUtterance() {
    let text = this.textInput.value.trim();
    if (!text) {
      this.showError('„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return null;
    }

    // „ÉÜ„Ç≠„Çπ„Éà„ÅÆÂâçÂá¶ÁêÜÔºàÊó•Êú¨Ë™ûÈü≥Â£∞ÂìÅË≥™ÊîπÂñÑÔºâ
    text = this.preprocessText(text);

    this.utterance = new SpeechSynthesisUtterance(text);

    // Èü≥Â£∞ÈÅ∏ÊäûÔºàÊîπËâØ„Åï„Çå„Åü„Éû„ÉÉ„Éî„É≥„Ç∞‰ΩøÁî®Ôºâ
    const selectedVoiceIndex = parseInt(this.voiceSelect.value);
    if (this.currentFilteredVoices && this.currentFilteredVoices[selectedVoiceIndex]) {
      this.utterance.voice = this.currentFilteredVoices[selectedVoiceIndex];
    } else if (this.voices[selectedVoiceIndex]) {
      this.utterance.voice = this.voices[selectedVoiceIndex];
    }

    // Ë®ÄË™ûË®≠ÂÆö
    this.utterance.lang = this.currentLanguage;

    // Èü≥Â£∞„Éë„É©„É°„Éº„ÇøË®≠ÂÆöÔºàÊó•Êú¨Ë™ûÈü≥Â£∞ÊúÄÈÅ©ÂåñÔºâ
    const selectedVoice = this.utterance.voice;
    this.utterance.rate = this.optimizeRateForVoice(parseFloat(this.rateSlider.value), selectedVoice);
    this.utterance.pitch = this.optimizePitchForVoice(parseFloat(this.pitchSlider.value), selectedVoice);
    this.utterance.volume = parseFloat(this.volumeSlider.value) / 100;

    // „Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©Ë®≠ÂÆö
    this.utterance.onstart = () => this.handleSpeechStart();
    this.utterance.onend = () => this.handleSpeechEnd();
    this.utterance.onerror = (event) => this.handleSpeechError(event);
    this.utterance.onpause = () => this.handleSpeechPause();
    this.utterance.onresume = () => this.handleSpeechResume();

    return this.utterance;
  }

  preprocessText(text) {
    // ÁµµÊñáÂ≠ó„ÇÑÁâπÊÆäË®òÂè∑„ÇíÈô§ÂéªÔºàË™≠„Åø‰∏ä„Åí„Çπ„Ç≠„ÉÉ„ÉóÔºâ
    text = text.replace(/[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F1E0}-\u{1F1FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu, '');

    // Ê©üÊ¢∞ÁöÑË®òÂè∑„ÇíË™≠„Åø„ÇÑ„Åô„ÅÑÂΩ¢„Å´Â§âÊèõ
    text = text.replace(/&/g, '„Ç¢„É≥„Éâ');
    text = text.replace(/@/g, '„Ç¢„ÉÉ„Éà„Éû„Éº„ÇØ');
    text = text.replace(/#/g, '„Éè„ÉÉ„Ç∑„É•');
    text = text.replace(/\$/g, '„Éâ„É´');
    text = text.replace(/%/g, '„Éë„Éº„Çª„É≥„Éà');
    text = text.replace(/\+/g, '„Éó„É©„Çπ');
    text = text.replace(/=/g, '„Ç§„Ç≥„Éº„É´');

    // URL„ÅÆÁ∞°Áï•Âåñ
    text = text.replace(/https?:\/\/[^\s]+/g, '„É™„É≥„ÇØ');

    // „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆÁ∞°Áï•Âåñ
    text = text.replace(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g, '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ');

    // ÈÄ£Á∂ö„Åô„ÇãÂè•Ë™≠ÁÇπ„ÅÆÊ≠£Ë¶èÂåñ
    text = text.replace(/[„ÄÇ]{2,}/g, '„ÄÇ');
    text = text.replace(/[„ÄÅ]{2,}/g, '„ÄÅ');

    // Êï∞Â≠ó„ÅÆË™≠„Åø‰∏ä„ÅíÊîπÂñÑ
    text = text.replace(/(\d+)Âπ¥/g, '$1„Å≠„Çì');
    text = text.replace(/(\d+)Êúà/g, '$1„Åå„Å§');
    text = text.replace(/(\d+)Êó•/g, '$1„Å´„Å°');

    // Á©∫ÁôΩ„ÅÆÊ≠£Ë¶èÂåñ
    text = text.replace(/\s+/g, ' ').trim();

    return text;
  }

  optimizeRateForVoice(rate, voice) {
    if (!voice) return rate;

    // Êó•Êú¨Ë™ûÈü≥Â£∞„ÅÆÈÄüÂ∫¶ÊúÄÈÅ©Âåñ
    if (voice.lang && voice.lang.startsWith('ja')) {
      // Êó•Êú¨Ë™ûÈü≥Â£∞„ÅØÈÄöÂ∏∏„Çà„ÇäÈÅÖ„ÇÅ„ÅåËá™ÁÑ∂
      return Math.max(0.7, rate * 0.9);
    }

    return rate;
  }

  optimizePitchForVoice(pitch, voice) {
    if (!voice) return pitch;

    // Êó•Êú¨Ë™ûÈü≥Â£∞„ÅÆ„Éî„ÉÉ„ÉÅÊúÄÈÅ©Âåñ
    if (voice.lang && voice.lang.startsWith('ja')) {
      // Ê•µÁ´Ø„Å™„Éî„ÉÉ„ÉÅÂ§âÊõ¥„ÇíÈÅø„Åë„Çã
      return Math.max(0.8, Math.min(1.2, pitch));
    }

    return pitch;
  }

  handlePlay() {
    if (!this.isPlaying && !this.isPaused) {
      // Êñ∞Ë¶èÂÜçÁîü
      const utterance = this.createUtterance();
      if (!utterance) return;

      this.synth.speak(utterance);
    } else if (this.isPaused) {
      // ‰∏ÄÊôÇÂÅúÊ≠¢„Åã„Çâ„ÅÆÂÜçÈñã
      this.synth.resume();
    }
  }

  handlePause() {
    if (this.isPlaying && !this.isPaused) {
      // Ë™≠„Åø‰∏ä„Åí‰∏≠„ÅÆÂ†¥Âêà„ÅÆ„Åø‰∏ÄÊôÇÂÅúÊ≠¢
      this.synth.pause();
    }
  }

  handleStop() {
    // ÂÆåÂÖ®ÂÅúÊ≠¢ÔºöË™≠„Åø‰∏ä„Åí„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Å¶ÊúÄÂàù„Åã„ÇâÂÅúÊ≠¢
    this.synth.cancel();
    this.handleSpeechEnd();
  }

  handleSpeechStart() {
    this.isPlaying = true;
    this.isPaused = false;
    this.updateControlButtons();
    this.updateStatus('Ë™≠„Åø‰∏ä„Åí‰∏≠...', 'speaking');
    this.startVisualizer();
  }

  handleSpeechEnd() {
    this.isPlaying = false;
    this.isPaused = false;
    this.updateControlButtons();
    this.updateStatus('Ê∫ñÂÇôÂÆå‰∫Ü', 'ready');
    this.stopVisualizer();
  }

  handleSpeechPause() {
    this.isPaused = true;
    this.updateControlButtons();
    this.updateStatus('‰∏ÄÊôÇÂÅúÊ≠¢‰∏≠', 'paused');
  }

  handleSpeechResume() {
    this.isPaused = false;
    this.updateControlButtons();
    this.updateStatus('Ë™≠„Åø‰∏ä„Åí‰∏≠...', 'speaking');
  }

  handleSpeechError(event) {
    console.error('Speech synthesis error:', event);
    this.isPlaying = false;
    this.isPaused = false;
    this.updateControlButtons();
    this.showError(`Èü≥Â£∞ÂêàÊàê„Ç®„É©„Éº: ${event.error}`);
    this.stopVisualizer();
  }

  updateControlButtons() {
    // ÂÜçÁîü„Éú„Çø„É≥ÔºöÂÅúÊ≠¢‰∏≠„Åæ„Åü„ÅØ‰∏ÄÊôÇÂÅúÊ≠¢‰∏≠„Å´ÊúâÂäπ
    this.playBtn.disabled = this.isPlaying && !this.isPaused;

    // ‰∏ÄÊôÇÂÅúÊ≠¢„Éú„Çø„É≥ÔºöË™≠„Åø‰∏ä„Åí‰∏≠„ÅÆ„ÅøÊúâÂäπ
    this.pauseBtn.disabled = !this.isPlaying || this.isPaused;

    // ÂÅúÊ≠¢„Éú„Çø„É≥ÔºöË™≠„Åø‰∏ä„Åí‰∏≠„Åæ„Åü„ÅØ‰∏ÄÊôÇÂÅúÊ≠¢‰∏≠„Å´ÊúâÂäπ
    this.stopBtn.disabled = !this.isPlaying && !this.isPaused;

    // „Éú„Çø„É≥„ÉÜ„Ç≠„Çπ„Éà„ÅÆÊõ¥Êñ∞
    if (this.isPaused) {
      this.playBtn.querySelector('.btn-text').textContent = 'ÂÜçÈñã';
      this.playBtn.setAttribute('aria-label', 'Ë™≠„Åø‰∏ä„ÅíÂÜçÈñã');
    } else {
      this.playBtn.querySelector('.btn-text').textContent = 'ÂÜçÁîü';
      this.playBtn.setAttribute('aria-label', 'Ë™≠„Åø‰∏ä„ÅíÈñãÂßã');
    }
  }

  updateStatus(message, type = 'ready') {
    this.statusDisplay.textContent = message;
    this.statusDisplay.className = `status-display ${type}`;
  }

  showError(message) {
    this.updateStatus(message, 'error');
    setTimeout(() => {
      if (!this.isPlaying) {
        this.updateStatus('Ê∫ñÂÇôÂÆå‰∫Ü', 'ready');
      }
    }, 3000);
  }

  initializeVisualizer() {
    this.visualizerCanvas.width = 400;
    this.visualizerCanvas.height = 100;
    this.drawVisualizerIdle();
  }

  startVisualizer() {
    this.visualizerCanvas.classList.add('active');
    this.animateVisualizer();
  }

  stopVisualizer() {
    this.visualizerCanvas.classList.remove('active');
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = null;
    }
    this.drawVisualizerIdle();
  }

  animateVisualizer() {
    const canvas = this.visualizerCanvas;
    const ctx = this.visualizerCtx;
    const width = canvas.width;
    const height = canvas.height;

    ctx.clearRect(0, 0, width, height);

    // Ê≥¢ÂΩ¢ÊèèÁîª
    const time = Date.now() * 0.005;
    const centerY = height / 2;
    const amplitude = height * 0.3;

    // „Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥‰ΩúÊàê
    const gradient = ctx.createLinearGradient(0, 0, width, 0);
    gradient.addColorStop(0, '#4facfe');
    gradient.addColorStop(0.5, '#00f2fe');
    gradient.addColorStop(1, '#4facfe');

    ctx.strokeStyle = gradient;
    ctx.lineWidth = 3;
    ctx.lineCap = 'round';

    // Ë§áÊï∞„ÅÆÊ≥¢„ÇíÊèèÁîª
    for (let wave = 0; wave < 3; wave++) {
      ctx.beginPath();
      ctx.globalAlpha = 0.7 - wave * 0.2;

      for (let x = 0; x < width; x += 2) {
        const y = centerY +
          Math.sin((x * 0.02) + time + wave) * amplitude * (0.5 + wave * 0.3) +
          Math.sin((x * 0.01) + time * 1.5 + wave) * amplitude * 0.3;

        if (x === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      }

      ctx.stroke();
    }

    ctx.globalAlpha = 1;

    if (this.isPlaying) {
      this.animationId = requestAnimationFrame(() => this.animateVisualizer());
    }
  }

  drawVisualizerIdle() {
    const canvas = this.visualizerCanvas;
    const ctx = this.visualizerCtx;
    const width = canvas.width;
    const height = canvas.height;

    ctx.clearRect(0, 0, width, height);

    // „Ç¢„Ç§„Éâ„É´Áä∂ÊÖã„ÅÆÁõ¥Á∑ö
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(0, height / 2);
    ctx.lineTo(width, height / 2);
    ctx.stroke();
  }

  handleKeyboardShortcuts(event) {
    // Ctrl/Cmd „Ç≠„Éº„Å®ÁµÑ„ÅøÂêà„Çè„Åõ„Åü„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà
    if (event.ctrlKey || event.metaKey) {
      switch (event.key) {
        case 'Enter':
          event.preventDefault();
          this.handlePlay();
          break;
        case ' ':
          event.preventDefault();
          if (this.isPlaying && !this.isPaused) {
            this.handlePause();
          } else if (this.isPaused) {
            this.handlePlay();
          }
          break;
        case 'Escape':
          event.preventDefault();
          this.handleStop();
          break;
        // „ÉÄ„Éº„ÇØ„É¢„Éº„ÉâÊ©üËÉΩÂâäÈô§Ê∏à„Åø
      }
    }
  }

  // „ÉÜ„Éº„ÉûÊ©üËÉΩÂâäÈô§Ôºà„É©„Ç§„Éà„É¢„Éº„ÉâÂõ∫ÂÆöÔºâ

  handleVisibilityChange() {
    // „Éö„Éº„Ç∏„ÅåÈùûË°®Á§∫„Å´„Å™„Å£„Åü„Å®„Åç„Å´Èü≥Â£∞„ÇíÂÅúÊ≠¢Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
    if (document.hidden && this.isPlaying) {
      // ÂøÖË¶Å„Å´Âøú„Åò„Å¶„Ç≥„É°„É≥„Éà„Ç¢„Ç¶„Éà
      // this.handlePause();
    }
  }

  initializePWA() {
    // Service WorkerÁôªÈå≤
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('service-worker.js')
        .then(registration => {
          console.log('Service Worker registered successfully:', registration);

          // „Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁ¢∫Ë™ç
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                this.showUpdateNotification();
              }
            });
          });
        })
        .catch(error => {
          console.log('Service Worker registration failed:', error);
        });
    }

    // „Ç§„É≥„Çπ„Éà„Éº„É´„Éó„É≠„É≥„Éó„ÉàÂá¶ÁêÜ
    window.addEventListener('beforeinstallprompt', (event) => {
      event.preventDefault();
      this.showInstallPrompt(event);
    });

    // PWA„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü
    window.addEventListener('appinstalled', () => {
      console.log('PWA installed successfully');
      this.updateStatus('„Ç¢„Éó„É™„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Åæ„Åó„Åü', 'ready');
    });
  }

  showUpdateNotification() {
    const notification = document.createElement('div');
    notification.className = 'update-notification';
    notification.innerHTML = `
      <p>Êñ∞„Åó„ÅÑ„Éê„Éº„Ç∏„Éß„É≥„ÅåÂà©Áî®ÂèØËÉΩ„Åß„Åô</p>
      <button onclick="location.reload()">Êõ¥Êñ∞</button>
      <button onclick="this.parentElement.remove()">Âæå„Åß</button>
    `;
    document.body.appendChild(notification);
  }

  showInstallPrompt(event) {
    // „Ç´„Çπ„Çø„É†„Ç§„É≥„Çπ„Éà„Éº„É´„Éó„É≠„É≥„Éó„Éà„ÇíË°®Á§∫Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
    console.log('PWA install prompt available');
  }
}

// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂàùÊúüÂåñ
document.addEventListener('DOMContentLoaded', () => {
  // Web Speech APIÂØæÂøú„ÉÅ„Çß„ÉÉ„ÇØ
  if (!('speechSynthesis' in window)) {
    alert('„Åä‰Ωø„ÅÑ„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØWeb Speech API„Çí„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ\nÂØæÂøú„Éñ„É©„Ç¶„Ç∂ÔºàChrome„ÄÅFirefox„ÄÅSafari„ÄÅEdgeÔºâ„Çí„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ„ÄÇ');
    return;
  }

  // „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÂßã
  window.ttsApp = new TextToSpeechApp();

  console.log('maru-text-to-speech initialized successfully');
});